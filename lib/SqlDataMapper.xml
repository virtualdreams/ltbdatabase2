<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlDataMapper</name>
    </assembly>
    <members>
        <member name="T:SqlDataMapper.ISqlProvider">
            <summary>
            Generic interface for sql provider
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.Open">
            <summary>
            Must provide open functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.Close">
            <summary>
            Must provide close functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.BeginTransaction">
            <summary>
            Must provide begin transaction functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.CommitTransaction">
            <summary>
            Must provide commit transaction functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.RollbackTransaction">
            <summary>
            Must provide rollback transaction functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.Select``1(System.String)">
            <summary>
            Must provide select object functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.SelectList``1(System.String)">
            <summary>
            Must provide select list functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.SelectScalar``1(System.String)">
            <summary>
            Must provide select scalar functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.SelectScalarList``1(System.String)">
            <summary>
            Must provide select list functionality, implemented as scalar list.
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.Insert(System.String)">
            <summary>
            Must provide insert functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.Update(System.String)">
            <summary>
            Must provide update functionality
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlProvider.Delete(System.String)">
            <summary>
            Must provide delete functionality
            </summary>
        </member>
        <member name="T:SqlDataMapper.ISqlQuery">
            <summary>
            Interface for query objects
            </summary>
        </member>
        <member name="M:SqlDataMapper.ISqlQuery.Check(System.Boolean)">
            <summary>
            Check for unresolved parameters
            </summary>
            <param name="check">Do the check?</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.ISqlQuery.Set(System.String)">
            <summary>
            Replaces the whole existing query with the new query
            </summary>
            <param name="query">The new query</param>
            <returns>This instance</returns>
        </member>
        <member name="P:SqlDataMapper.ISqlQuery.QueryString">
            <summary>
            Get the sql query
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlConfig">
            <summary>
            The config class for sql mapping.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.#ctor">
            <summary>
            Constructor for auto configuration (zeroconf).
            Searchs for <c>SqlMapperConfig.xml</c> file, otherwise throws an exception.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.#ctor(System.Boolean)">
            <summary>
            Constructor for auto configuration (zeroconf).
            Searchs for <c>SqlMapperConfig.xml</c> file, otherwise throws an exception.
            If createEmpty is set to true, an empty instance was created.
            </summary>
            <param name="createEmpty">Initialzes an empty instance or zeroconf</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.#ctor(System.String)">
            <summary>
            Constructor for auto configuration.
            </summary>
            <param name="config">The configuration file</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadConfiguration(System.String)">
            <summary>
            Load the configuration xml file.
            </summary>
            <param name="filename">The xml file contains the base configuration</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadProviders(System.String)">
            <summary>
            Load the providers xml file.
            </summary>
            <param name="filename">The xml file contains the provider informations</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadQueries(System.String)">
            <summary>
            Load the mappings xml file.
            </summary>
            <param name="filename">The xml file contains the statements</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.ReadConfiguration(System.Xml.Linq.XDocument)">
            <summary>
            Read configuration file for auto config.
            </summary>
            <param name="doc">A xml document contains the base configuration</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.ReadProviders(System.Xml.Linq.XDocument)">
            <summary>
            Read provider informations.
            </summary>
            <param name="doc">A xml document contains the provider informations</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.ValidateXml(System.Xml.Linq.XDocument,System.String)">
            <summary>
            Validate the xml document.
            Throws XmlSchemaException if fails
            </summary>
            <param name="doc">The xml document</param>
            <param name="xsd">The xsd stream name</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.GetProvider(System.String)">
            <summary>
            Get the provider information for a given id.
            </summary>
            <param name="id">The name of the provider.</param>
            <returns>Returns the provider.</returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.GetProviders">
            <summary>
            Get all provider ids from pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.ConvertToFullPath(System.String)">
            <summary>
            Get the full path for the given filename.
            </summary>
            <param name="filename">The filename as file, absolute filepath or relative filepath</param>
            <returns>The full path</returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.GetStatement(System.String)">
            <summary>
            Get the named raw sql statement from the cache.
            </summary>
            <param name="id">The name of the sql statement</param>
            <returns>Returns the raw statement.</returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.GetStatments">
            <summary>
            Get all statements ids from pool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.CreateQuery(System.String)">
            <summary>
            Create a new dynamic query out of the statement pool
            </summary>
            <param name="id">The named sql</param>
            <returns>New SqlQuery object</returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.CreateQuery``1(System.String)">
            <summary>
            Create a new dynamic query out of the statement pool. This is for a custom query class
            </summary>
            <typeparam name="T">The object type of ISqlQuery</typeparam>
            <param name="id">The named sql</param>
            <returns>New ISqlQuery object</returns>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.CreateContext">
            <summary>
            Create a new context using the default provider from configuration.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.CreateContext(System.String,System.String)">
            <summary>
            Create a new context using custom provider and connection string.
            </summary>
            <param name="id">A provider from configuration</param>
            <param name="connectionString">Custom connection string</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.AddStatement(System.String,System.String)">
            <summary>
            Add a user defined statement to the statement pool.
            </summary>
            <param name="id">The unique identifier for the statement</param>
            <param name="statement">The object contains the statement informations</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.AddStatement(System.String,SqlDataMapper.SqlConfig.Statement)">
            <summary>
            Add a loaded statement to the statement pool.
            </summary>
            <param name="id">The unique identifier for the statement</param>
            <param name="statement">The object contains the statement informations</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.AddProvider(System.String,System.String,System.String)">
            <summary>
            Add a user defined provider to the provider pool.
            assemblyName like: MySql.Data
            connectionClass like: MySql.Data.MySqlClient.MySqlConnection
            </summary>
            <param name="id">The unique identifier for the provider</param>
            <param name="assemblyName">The assembly name.</param>
            <param name="connectionClass">The connection class.</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.AddProvider(System.String,SqlDataMapper.SqlConfig.Provider)">
            <summary>
            Add a loaded provider to the provider pool.
            </summary>
            <param name="id">The unique identifier for the provider</param>
            <param name="provider">The object contains the provider informations</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.SetDefaultProvider(System.String)">
            <summary>
            Set the default provider.
            </summary>
            <param name="id">A id from the provider pool</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.SetDefaultConnectionString(System.String)">
            <summary>
            Set the default connection string.
            </summary>
            <param name="connectionString">A connection string</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadSelects(System.Xml.Linq.XDocument)">
            <summary>
            Load all select statements out of the given xml file.
            </summary>
            <param name="doc">The document that contains the statements</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadInserts(System.Xml.Linq.XDocument)">
            <summary>
            Load all insert statements out of the given xml file.
            </summary>
            <param name="doc">The document that contains the statements</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadUpdates(System.Xml.Linq.XDocument)">
            <summary>
            Load all update statements out of the given xml file.
            </summary>
            <param name="doc">The document that contains the statements</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadDeletes(System.Xml.Linq.XDocument)">
            <summary>
            Load all delete statements out of the given xml file.
            </summary>
            <param name="doc">The document that contains the statements</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadParts(System.Xml.Linq.XDocument)">
            <summary>
            Load all fragment statements out of the given xml file.
            </summary>
            <param name="doc">The document that contains the statements</param>
        </member>
        <member name="M:SqlDataMapper.SqlConfig.LoadInclude(System.Xml.Linq.XDocument)">
            <summary>
            Load included documents.
            </summary>
            <param name="doc">The document that contains the statements</param>
        </member>
        <member name="P:SqlDataMapper.SqlConfig.Version">
            <summary>
            Assembly version
            </summary>
        </member>
        <member name="P:SqlDataMapper.SqlConfig.ValidationCheck">
            <summary>
            Enable or disable xml validation.
            Mono 2.6.x has a bug on GetResourceFromStream().
            This feature is completely disabled at the moment.
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlContext">
            <summary>
            The sql context
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlContext.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new context.
            </summary>
            <param name="assemblyName"></param>
            <param name="connectionClass"></param>
            <param name="connectionString"></param>
        </member>
        <member name="M:SqlDataMapper.SqlContext.#ctor(SqlDataMapper.ISqlProvider)">
            <summary>
            Create a new context out of a custom provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:SqlDataMapper.SqlContext.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
            <remarks>
            The method opens a connection to the datebase. The connection will closed through <c>CommitTransaction</c> or <c>RollbackTransaction</c>.
            </remarks>
        </member>
        <member name="M:SqlDataMapper.SqlContext.CommitTransaction">
            <summary>
            Commits the database transaction.
            </summary>
            <remarks>
            The connection will closed.
            </remarks>
        </member>
        <member name="M:SqlDataMapper.SqlContext.RollbackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <remarks>
            The connection will closed.
            </remarks>
        </member>
        <member name="M:SqlDataMapper.SqlContext.QueryForObject``1(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql select statement that returns data to populate a single object instance.
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="query">The query object</param>
            <returns>A single object</returns>
        </member>
        <member name="M:SqlDataMapper.SqlContext.QueryForList``1(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql select statement that returns data to populate a number of result objects.
            </summary>
            <typeparam name="TDestination">The object type</typeparam>
            <param name="query">The query object</param>
            <returns>A list ob objects</returns>
        </member>
        <member name="M:SqlDataMapper.SqlContext.QueryForScalar``1(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql select statement that returns a single value.
            </summary>
            <typeparam name="T">The object</typeparam>
            <param name="query">The query object</param>
            <returns>A single object</returns>
        </member>
        <member name="M:SqlDataMapper.SqlContext.QueryForScalarList``1(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql statement that returns a list of single values.
            </summary>
            <typeparam name="TDestination">The object</typeparam>
            <param name="query">The query object</param>
            <returns>A list of single objects</returns>
        </member>
        <member name="M:SqlDataMapper.SqlContext.Insert(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql insert statement.
            </summary>
            <param name="query">The query object</param>
            <returns>The affected rows</returns>
        </member>
        <member name="M:SqlDataMapper.SqlContext.Update(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql update statement.
            </summary>
            <param name="query">The query object</param>
            <returns>The affected rows</returns>
        </member>
        <member name="M:SqlDataMapper.SqlContext.Delete(SqlDataMapper.ISqlQuery)">
            <summary>
            Executes a sql delete statement.
            </summary>
            <param name="query">The query object</param>
            <returns>The affected rows</returns>
        </member>
        <member name="P:SqlDataMapper.SqlContext.ParameterCheck">
            <summary>
            Enable or disable parameter check after replace placeholders
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlDataMapperException">
            <summary>
            This exception is thrown when an error in the SqlMapper occurs.
            </summary>
            <remarks>
            This is the base exception for all exceptions thrown in the SqlMapper
            </remarks>
        </member>
        <member name="M:SqlDataMapper.SqlDataMapperException.#ctor">
            <summary>
            Initializes a new instance og the <see cref="T:SqlDataMapper.SqlDataMapperException" /> class.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlDataMapperException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance og the <see cref="T:SqlDataMapper.SqlDataMapperException" /> class.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlDataMapperException.#ctor(System.String)">
            <summary>
            Initializes a new instance og the <see cref="T:SqlDataMapper.SqlDataMapperException" /> class.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlDataMapperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance og the <see cref="T:SqlDataMapper.SqlDataMapperException" /> class.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlDataMapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance og the <see cref="T:SqlDataMapper.SqlDataMapperException" /> class.
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlMapperProperty">
            <summary>
            Flags for property attributes.
            </summary>
        </member>
        <member name="F:SqlDataMapper.SqlMapperProperty.None">
            <summary>
            No function
            </summary>
        </member>
        <member name="F:SqlDataMapper.SqlMapperProperty.Ignored">
            <summary>
            Ignore this member
            </summary>
        </member>
        <member name="F:SqlDataMapper.SqlMapperProperty.Required">
            <summary>
            This member is required
            </summary>
        </member>
        <member name="F:SqlDataMapper.SqlMapperProperty.NotNull">
            <summary>
            This member is required and can't null
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlMapperAttributes">
            <summary>
            Provides an attribute for properties to enhance the core mapper.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlMapperAttributes.#ctor(System.String)">
            <summary>
            Constructor to set an alias datebase field name
            </summary>
            <param name="fieldName">The alias used in result set</param>
        </member>
        <member name="M:SqlDataMapper.SqlMapperAttributes.#ctor(SqlDataMapper.SqlMapperProperty)">
            <summary>
            Constructor to set a property usage flag
            </summary>
            <param name="property">The property flag</param>
        </member>
        <member name="M:SqlDataMapper.SqlMapperAttributes.#ctor(System.String,SqlDataMapper.SqlMapperProperty)">
            <summary>
            Constructor to set an alias datebase field name and a property usage flag
            </summary>
            <param name="fieldName">The alias used in result set</param>
            <param name="property">The property flag</param>
        </member>
        <member name="P:SqlDataMapper.SqlMapperAttributes.Alias">
            <summary>
            Returns null or the new alias for the database field name
            </summary>
        </member>
        <member name="P:SqlDataMapper.SqlMapperAttributes.Property">
            <summary>
            Returns the field usage or None
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlMapperDebugCallback">
            <summary>
            Delegate for <c>SqlObject</c> debugging.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="T:SqlDataMapper.SqlMapperObjectDebug">
            <summary>
            Provides an attribute for debugging.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlMapperObjectDebug.#ctor(System.Boolean,System.Type,System.String)">
            <summary>
            Enable debugging of SqlMapper.
            The method must: public, static and in an class.
            <c>The method has the following signature: 'public static void NAME(DbDataReader reader)'</c>
            </summary>
            <param name="enable">Enable or disable callback</param>
            <param name="type">Typeof class contains the callback</param>
            <param name="method">The Name of the callback method</param>
        </member>
        <member name="P:SqlDataMapper.SqlMapperObjectDebug.Enabled">
            <summary>
            Get or set enabled debugging
            </summary>
        </member>
        <member name="P:SqlDataMapper.SqlMapperObjectDebug.Callback">
            <summary>
            Get or set the callback function.
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlObject">
            <summary>
            The core class for sql-to-class mapping and class-to-<c>SqlParameter</c> mapping.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlObject.GetAs``1(System.Data.Common.DbDataReader)">
            <summary>
            Map a data reader object to a class
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlObject.GetParameters``1(``0)">
            <summary>
            Map an object to <c>SqlParameter</c> class
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlObject.GetDbValue(System.Object)">
            <summary>
            Translate DbNull to null
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlObject.ColumnExists(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Check if column exists in database result set
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlObject.GetPropertyAttribute(System.Reflection.PropertyInfo)">
            <summary>
            Get the custom attribute for the property
            </summary>
            <returns>Returns the attribute or null</returns>
        </member>
        <member name="M:SqlDataMapper.SqlObject.GetObjectAttribute``1">
            <summary>
            Get the custom attribute for the class
            </summary>
            <typeparam name="T">The class object</typeparam>
            <returns>Returns the attribute or null</returns>
        </member>
        <member name="T:SqlDataMapper.SqlParameter">
            <summary>
            A class to provide parameter for sql statements.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlParameter.#ctor">
            <summary>
            Create a new instance.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Create a new instance and add a single parameter.
            </summary>
            <param name="key">A unique key.</param>
            <param name="value">A value.</param>
        </member>
        <member name="M:SqlDataMapper.SqlParameter.Add(System.String,System.Object)">
            <summary>
            Add new parameters.
            </summary>
            <param name="key">A unique key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:SqlDataMapper.SqlParameter.HasParameters">
            <summary>
            Returns if this instance has parameters.
            </summary>
        </member>
        <member name="P:SqlDataMapper.SqlParameter.Item(System.String)">
            <summary>
            Get or set a parameter.
            </summary>
            <param name="key">A unique key.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:SqlDataMapper.SqlProvider">
            <summary>
            The default sql provider.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.#ctor(System.String,System.String,System.String)">
            <summary>
            Create a new sql connection class. The assembly would automatic loaded if possible.
            </summary>
            <param name="assemblyName">The assembly name, i.e. <c>MySql.Data</c></param>
            <param name="connectionClass">The connection class, i.e. <c>MySql.Data.MySqlClient.MySqlConnection</c></param>
            <param name="connectionString">The connection string to the database, i.e. <c>Server=hostname;Database=dbname;Uid=user;Pwd=password;Pooling=true</c></param>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.Open">
            <summary>
            Opens a connection to the database
            </summary>
            <remarks>
            If a connection already exits, the connection was closed before.
            </remarks>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.Close">
            <summary>
            Close the connection to the database
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.BeginTransaction">
            <summary>
            Begins a database transaction
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.CommitTransaction">
            <summary>
            Commits the database transaction.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.RollbackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.Select``1(System.String)">
            <summary>
            Select a single object from the database.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.SelectList``1(System.String)">
            <summary>
            Selects a list of objects from the database.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.SelectScalar``1(System.String)">
            <summary>
            Selects the first row and the first column in resultset.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.SelectScalarList``1(System.String)">
            <summary>
            Selects the first column and each row.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.Insert(System.String)">
            <summary>
            Insert
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.Update(System.String)">
            <summary>
            Update
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlProvider.Delete(System.String)">
            <summary>
            Delete
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlQuery">
            <summary>
            The implementaton of the query object.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.#ctor">
            <summary>
            Create an new sql query object with an empty query
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.#ctor(SqlDataMapper.ISqlQuery)">
            <summary>
            Create a new sql query from an other instance
            </summary>
            <param name="query">A ISqlQuery instance</param>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.#ctor(System.String)">
            <summary>
            Create a new sql query.
            </summary>
            <param name="query">A sql query</param>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.op_Addition(SqlDataMapper.SqlQuery,System.String)">
            <summary>
            Appends a sql query string
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.op_Addition(SqlDataMapper.SqlQuery,SqlDataMapper.ISqlQuery)">
            <summary>
            Appends a sql query object
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.CheckForUnresolvedParameters">
            <summary>
            Check for empty parameter names an return a list of them.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Check">
            <summary>
            Check for empty parameter names an throws an exception if found any
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Check(System.Boolean)">
            <summary>
            Check for empty parameter names an throws an exception if found any.
            </summary>
            <param name="check">Perform the check if set to true.</param>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.GetUnresolvedParameters">
            <summary>
            Get a SqlParameter object for unresolved parameters.
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.GetUnresolvedParameters(System.Object)">
            <summary>
            Get a SqlParameter object for unresolved parameters.
            </summary>
            <param name="value">A custom value for each parameter</param>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Set(System.String)">
            <summary>
            Replaces the whole existing query with the new query
            </summary>
            <param name="query">The new query string</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.CreateQuery(System.String)">
            <summary>
            Create a new dynamic sql query
            </summary>
            <param name="query">A query string</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.CreateQuery(SqlDataMapper.ISqlQuery)">
            <summary>
            Create a new dynamic sql query out of an other query
            </summary>
            <param name="query">A query object</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetEntities``1(``0)">
            <summary>
            Convert the object to a parameter object and try to replace all named parameters
            </summary>
            <typeparam name="T">The object type</typeparam>
            <param name="obj">The object</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetEntities(SqlDataMapper.SqlParameter)">
            <summary>
            Convert the parameter object and try to replace all named parameters
            </summary>
            <param name="parameters">A SqlParameter object</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetEntity(System.String,System.Object)">
            <summary>
            Set a single named parameter. The value can be every type.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetString(System.String,System.String)">
            <summary>
            Set a single named parameter. The value must a string
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetInt(System.String,System.Int32)">
            <summary>
            Set a single named parameter. The value must a integer
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetLong(System.String,System.Int64)">
            <summary>
            Set a single named parameter. The value must a long
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetSingle(System.String,System.Single)">
            <summary>
            Set a single named parameter. The value must a single
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetDouble(System.String,System.Double)">
            <summary>
            Set a single named parameter. The value must a double
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetDecimal(System.String,System.Decimal)">
            <summary>
            Set a single named parameter. The value must a decimal
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetChar(System.String,System.Char)">
            <summary>
            Set a single named parameter. The value must a char
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetDateTime(System.String,System.DateTime)">
            <summary>
            Set a single named parameter. The value must a DateTime
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.SetBinary(System.String,System.Byte[])">
            <summary>
            Set a single named parameter. The value must a binary array.
            </summary>
            <param name="name">The named parameter</param>
            <param name="value">The value</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Add(SqlDataMapper.ISqlQuery)">
            <summary>
            Add a sql query object
            </summary>
            <param name="query">A sql object contains the query</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Add(System.String)">
            <summary>
            Add a sql query string
            </summary>
            <param name="query">A query or a fragment of a query</param>
            <returns>A new instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Append(SqlDataMapper.ISqlQuery)">
            <summary>
            Appends a sql query object
            </summary>
            <param name="query">A sql object contains the query</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Append(System.String)">
            <summary>
            Appends a sql query string
            </summary>
            <param name="query">A query or a fragment of a query</param>
            <returns>This instance</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.ToString">
            <summary>
            Get the sql query
            </summary>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Replace(System.String,System.Object,System.Boolean)">
            <summary>
            Replace the parameters with the value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value. Pass it before through GetValue()</param>
            <param name="suppressException"></param>
            <returns>The replaced sql query</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Replace(System.String,System.Object)">
            <summary>
            Replace the parameters with the value.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="value">The value. Pass it before through GetValue()</param>
            <returns>The replaced sql query</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.Format(System.String)">
            <summary>
            Remove comments (line and block)
            </summary>
            <param name="query">A sql string</param>
            <returns>A formatted sql string</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.GetValue(System.Object)">
            <summary>
            Convert the the value to a sql type. Enumerables, exclude strings and byte-arrays, will transformed to comma separated line.
            </summary>
            <param name="value">The value</param>
            <returns>A sql compatible string</returns>
        </member>
        <member name="M:SqlDataMapper.SqlQuery.GetPrimitive(System.Object)">
            <summary>
            Format the value to compatible sql string.
            </summary>
            <param name="value">The value</param>
            <returns>A sql compatible string</returns>
        </member>
        <member name="P:SqlDataMapper.SqlQuery.Handler">
            <summary>
            Override the internal format handler.
            </summary>
        </member>
        <member name="P:SqlDataMapper.SqlQuery.QueryString">
            <summary>
            Get the query string
            </summary>
        </member>
        <member name="T:SqlDataMapper.SqlQuery.FormatHandler">
            <summary>
            The format handler type to override the internal handler.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
    </members>
</doc>
